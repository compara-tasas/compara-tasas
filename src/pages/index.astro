---
import { getPFInvestments } from '../Services/argentinaDatos';
import { getFCIInvestments } from '../Services/argentinaDatosFCI';
import { getReturns } from '../client/argentinaDatos';
import Best from '../components/BestInvestments/Best.astro';
import Card from '../components/Card/Card.astro';
import Dolares from '../components/Dolares.astro';
import Row from '../components/ExchangeTable/Row.astro';
import NavBar from '../components/Menu/NavBar';
import Banner from '../components/banner.astro';
import { EXCHANGES } from '../data/exchanges';
import Layout from '../layouts/Layout.astro';
import type { Investment } from '../model/business';
import type { Return } from '../model/exchange';
import { TYPE_INVESTMENT_PESOS_MAPPING } from '../utils/returnsMapping';

// Define your API endpoint and API keys
const apiEndpoint =
  'https://thklpacfwtrtuynqlnah.supabase.co/rest/v1/tna_view?display=eq.TRUE&select=*';
const apiKey = import.meta.env.PUBLIC_SUPABASE_KEY;

// Configure your fetch request with headers

const response = await fetch(apiEndpoint, {
  method: 'GET',
  headers: {
    Authorization: `Bearer ${apiKey}`,
    apikey: apiKey,
  },
});

const dataSupabase = await response.json();
const FCIData = await getFCIInvestments();
const dataReturns = await getReturns();

// Solo usamos la info de criptopesos y buendolar de Supabase
const filteredSBData = dataSupabase.filter(
  (d: Investment) =>
    d.type === 'criptopesos' ||
    d.type === 'buendolar' ||
    d.name === 'Naranja X',
);

const TOP_INVESTMENT_QUANTITY = 3;

// Plazos fijos de ArgentinaDatos
const PFData = await getPFInvestments();

// Concatenar arrays
const allFciData = Array.prototype.concat(filteredSBData, ...FCIData);

const pesos = ['cuenta_remunerada', 'tradicional', 'pf'];
const pesosLinks = {
  cuenta_remunerada: TYPE_INVESTMENT_PESOS_MAPPING.cuenta_remunerada.sectionId,
  tradicional: TYPE_INVESTMENT_PESOS_MAPPING.tradicional.sectionId,
  pf: TYPE_INVESTMENT_PESOS_MAPPING.pf.sectionId,
  otros: TYPE_INVESTMENT_PESOS_MAPPING.otros.sectionId,
};

const isPesoCoin = (value: Return) =>
  value.moneda === 'ARS' || value.moneda === 'NUARS' || value.moneda === 'NARS';

const sortedPfData: Investment[] = PFData.filter((item) =>
  pesos.includes(item.type),
).sort((a, b) => {
  if (a.tea < b.tea) {
    return 1; // for descending order, return 1 if the first item is less than the second
  }
  if (a.tea > b.tea) {
    return -1; // return -1 if the first item is greater than the second
  }
  return 0; // return 0 if they're equal
});

const sortedFciData: Investment[] = allFciData
  .filter((item) => pesos.includes(item.type))
  .sort((a, b) => {
    if (a.tea < b.tea) {
      return 1; // for descending order, return 1 if the first item is less than the second
    }
    if (a.tea > b.tea) {
      return -1; // return -1 if the first item is greater than the second
    }
    return 0; // return 0 if they're equal
  });

const sortedCriptoData = [];
for (const [exchange, values] of Object.entries(dataReturns)) {
  for (const value of values) {
    if (value.apy <= 0 || isPesoCoin(value)) {
      continue;
    }
    sortedCriptoData.push({ exchange, ...value });
  }
}
---

<Layout
  title='Compara Tasas'
  metaImage='https://i.ibb.co/QYKMwcL/Twitter-post-2.pnG'
  metaDescription='Compara las tasas de rendimiento que ofrecen las principales billeteras digitales y sacale mas jugo a tu pesos.'
  metaKeywords='Comparar tasas, tasas de interes Argentina, mejores tasas de interes, Comparar FCI, mejores tasas FCI, comparar tasas de interes, plazo fijo argentina, plazo fijo vs fci'
>
  <NavBar pathname='/' client:load />
  <div
    id='containter'
    class='container mx-4 mx-auto my-6 max-w-sm px-4 sm:max-w-sm md:max-w-md lg:max-w-lg'
  >
    <h1 class='my-6 text-3xl font-bold text-gray-900 dark:text-gray-100'>
      ¡Descubrí cuánto podés <span class='text-indigo-500'
        >hacer rendir tu plata!</span
      >
    </h1>
    <Dolares />
    <Banner size='small' company='letsbit' />
    <Best link={`/pesos#${pesosLinks.cuenta_remunerada}`} sectionName='FCI'>
      <div class='flex flex-col'>
        {
          sortedFciData
            .slice(0, 3)
            .map((item, index) => (
              <Card
                {...item}
                key={index}
                disableRounded
                className={`border-b-1 border-b border-gray-100  dark:border-gray-600 ${index === TOP_INVESTMENT_QUANTITY - 1 && 'rounded-b-lg border-none'}`}
              />
            ))
        }
      </div>
    </Best>
    <Banner size='small' company='cobros' />
    <Best link={`/pesos#${pesosLinks.pf}`} sectionName='Plazos Fijos'>
      <div class='flex flex-col'>
        {
          sortedPfData
            .slice(0, 3)
            .map((item, index) => (
              <Card
                {...item}
                key={index}
                disableRounded
                className={`border-b-1 border-b border-gray-100  dark:border-gray-600 ${index === TOP_INVESTMENT_QUANTITY - 1 && 'rounded-b-lg border-none'}`}
              />
            ))
        }
      </div>
    </Best>
    <Best link={'/crypto'} sectionName='Cripto'>
      <div class='flex flex-col'>
        {
          sortedCriptoData
            .sort((a, b) => b.apy - a.apy)
            .slice(0, 3)
            .map((item, index) => {
              const isLastItem = index === TOP_INVESTMENT_QUANTITY - 1;
              return (
                <Row
                  key={index}
                  logo={EXCHANGES[item.exchange].logo}
                  apy={item.apy}
                  moneda={item.moneda}
                  className={`  bg-white px-4  dark:border-gray-600 ${isLastItem ? 'rounded-b-lg' : 'border-b-1 border-b border-gray-100'} `}
                  isBestSection
                  isLastItem={isLastItem}
                  exchange={item.exchange}
                />
              );
            })
        }
      </div>
    </Best>
    <Banner size='large' />
  </div>
</Layout>
